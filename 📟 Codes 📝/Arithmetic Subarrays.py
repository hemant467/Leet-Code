#The below python code defines two functions:

#1. `checkArithmeticSubarrays`: This function takes three parameters: `nums`, `l`, and `r`, where `nums` is a list of integers, and `l` and `r` are lists of integers representing the left and right indices of subarrays. It returns a list of boolean values indicating whether each subarray is arithmetic.

#2. `_isArithmetic`: This is a helper function that takes a list of integers `nums` and two integers `l` and `r` representing the left and right indices of a subarray. It checks whether the given subarray is arithmetic and returns a boolean value accordingly.

class Solution:
  def checkArithmeticSubarrays(self, nums: List[int], l: List[int], r: List[int]) -> List[bool]:
    return [self._isArithmetic(nums, a, b) for a, b in zip(l, r)]
    #The `checkArithmeticSubarrays` function iterates through each pair of left and right indices `(a, b)` using `zip(l, r)`.
    #For each pair `(a, b)`, it calls the `_isArithmetic` function to check if the subarray `nums[a:b+1]` is arithmetic.

  def _isArithmetic(self, nums: List[int], l: int, r: int) -> bool:
    if r - l < 2: #The `_isArithmetic` function first checks if the length of the subarray is less than 2.
      return True #If less than 2, it returns `True` because any subarray of length less than 2 is considered arithmetic.

    numsSet = set() #It initializes a set `numsSet` to store the unique elements in the subarray
    
    #It initializes variables `mini` and `maxi` to track the minimum and maximum values in the subarray
    mini = math.inf
    maxi = -math.inf

    #It then iterates through the elements of the subarray, updating `mini`, `maxi`, and adding elements to `numsSet`.
    for i in range(l, r+1):
      mini = min(mini, nums[i])
      maxi = max(maxi, nums[i])
      numsSet.add(nums[i])

    #After processing all elements, it calculates the interval between consecutive elements (`interval`) by dividing the difference between `maxi` and `mini` by the length of the subarray (`r - l`). If this interval is not an integer, the subarray is not arithmetic.
    if (maxi - mini) % (r - l) != 0:
      return False #It returns `False`.

    interval = (maxi - mini) // (r - l) #It checks if each element in the subarray can be generated by adding multiples of `interval` to `mini`.
    return all(mini + k * interval in numsSet
               for k in range(1, r - l + 1)) #If any element is missing from `numsSet`, it returns `False`. Otherwise, it returns `True`, indicating that the subarray is arithmetic.

    #The `checkArithmeticSubarrays` function returns a list of boolean values indicating whether each subarray is arithmetic based on the results obtained from the `_isArithmetic` function.

#Time Complexity : O(mn)
#Space Complexity : O(n)